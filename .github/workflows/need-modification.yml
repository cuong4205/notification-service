name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

env:
  APP_NAME: my-app
  IMAGE_NAME: my-app-image

jobs:
  lint:
    name: ðŸ§¹ Lint Code
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18
      - name: Install dependencies
        run: npm install
      - name: Run ESLint
        run: npm run lint

  test:
    name: ðŸ§ª Run Tests
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18
      - name: Install dependencies
        run: npm ci
      - name: Run unit tests
        run: npm test
      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: test-results
          path: tests/results

  build:
    name: ðŸš€ Build & Dockerize
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Log in to Docker registry
        uses: docker/login-action@v2
        with:
          registry: ${{ secrets.DOCKER_USERNAME }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build Docker image
        run: |
          cd backend
          docker build -t ${{ env.IMAGE_NAME }}:latest .
      - name: Build frontend Docker image
        run: |
          cd frontend
          docker build -t ${{ env.IMAGE_NAME }}-frontend:latest .

  push:
    name: ðŸ“¦ Push Docker images
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Log in to Docker registry
        uses: docker/login-action@v2
        with:
          registry: ${{ secrets.DOCKER_USERNAME }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Push backend image
        run: docker push ${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:latest
      - name: Push frontend image
        run: docker push ${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}-frontend:latest

  deploy-staging:
    name: ðŸš§ Deploy to staging
    runs-on: ubuntu-latest
    needs: push
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Deploy backend to staging server
        run: ssh user@staging-host "docker pull ${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:latest && docker run -d --rm ---name staging-backend ${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:latest"
      - name: Deploy frontend to staging
        run: ssh user@staging-host "docker pull ${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}-frontend:latest && docker run -d --rm ---name staging-frontend ${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}-frontend:latest"

  deploy-production:
    name: ðŸš€ Deploy to production
    runs-on: ubuntu-latest
    needs: push
    if: github.ref == 'refs/heads/main' && github.event.inputs.deploy_to_prod == 'true'
    steps:
      - name: Wait for manual approval
        uses: peter-evans/repository-dispatch@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          event-type: manual-approval
      - name: Deploy backend to production
        run: ssh user@prod-host "docker pull ... && docker run -d --name prod-backend ..."
      - name: Deploy frontend to production
        run: ssh user@prod-host "docker pull ... && docker run -d --name prod-frontend ..."
