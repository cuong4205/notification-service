# Dependencies are managed in the Dockerfile in the inkscape-ci-docker
# Git repository. Change them there, wait a bit, and then we'll use
# the new ones here in these builds.
image: registry.gitlab.com/inkscape/inkscape-ci-docker/master


# This file is structured in four parts:
# I) definitions
# II) build jobs
# III) checks that are run on merge requests
# IV) building inkscape.gitlab.io/inkscape (doc and scan)
#


#######################
#                     #
#     Definitions     #
#                     #
#######################

# all jobs are safe to interrupt
default:
  interruptible: true
  artifacts:
    name: "$CI_JOB_NAME-$CI_COMMIT_REF_NAME"
  timeout: 3h


#speedup git on runners
variables:
  GIT_DEPTH: "50"
  GIT_SUBMODULE_STRATEGY: recursive

#reusable templates
.ccache_init: &ccache_init
  before_script:
    - mkdir -p ccache
    - export CCACHE_BASEDIR=${PWD}
    - export CCACHE_DIR=${PWD}/ccache

.cmake: &cmake
- mkdir -p build/conf
- cd build
- cmake .. -DCMAKE_C_COMPILER_LAUNCHER=ccache -DCMAKE_CXX_COMPILER_LAUNCHER=ccache -DCMAKE_BUILD_TYPE=Debug -DCMAKE_INSTALL_PREFIX:PATH=$PWD/install_dir/ -DCMAKE_EXPORT_COMPILE_COMMANDS=ON

# basic workflow setup:
# - run pipelines for all branches without an open MR
# - run MR pipeline only as soon as an MR is opened
workflow:
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
    - if: '$CI_COMMIT_BRANCH && $CI_OPEN_MERGE_REQUESTS'
      when: never
    - if: '$CI_COMMIT_BRANCH'

.run_MR: &run_for_MR
  if: '$CI_MERGE_REQUEST_ID'

.run_no_MR: &do_not_run_for_MR
  if: '$CI_MERGE_REQUEST_ID'
  when: never

.run_no_schedules: &do_not_run_for_schedules
  if: '$CI_PIPELINE_SOURCE == "schedule"'
  when: never

.run_otherwise: &run_otherwise
  when: on_success


#######################
#                     #
#  Building inkscape  #
#                     #
#######################
# Linux, Appimage, macOS, Windows.


inkscape:linux:
  stage: build
  timeout: 3h
  rules:
    - *do_not_run_for_schedules
    - *run_otherwise
  cache:
    key: "cache-linux"
    paths:
      - ccache/
  <<: *ccache_init
  script:
    - *cmake
    - make -j3 install
    - make -j3 tests
    - make -j3 unit_tests
    #- cpack -G DEB
    - rm -rf src _CPack_Packages # exclude from artifacts
    - cd ..
  artifacts:
    expire_in: 1 year
    paths:
      - build/


appimage:linux:
  stage: build
  timeout: 3h
  rules:
    - *do_not_run_for_schedules
    - *run_otherwise
  cache:
    key: "cache-appimage"
    paths:
      - ccache/
  <<: *ccache_init
  script:
    - bash -ex packaging/appimage/generate.sh
  artifacts:
    expire_in: 1 year
    paths:
      - Inkscape*.AppImage*


inkscape:macos:
  stage: build
  parallel:
    matrix:
      - ARCHITECTURE: [ "arm64" ]
  rules:
    - *do_not_run_for_schedules
    # Create macOS jobs only for the "inkscape" namespace as the runner is
    # restricted to that group. ("dehesselle" namespace has its own runner)
    - if: $CI_PROJECT_NAMESPACE != "inkscape" && $CI_PROJECT_NAMESPACE != "dehesselle"
      when: never
    - *run_otherwise
  cache:
    - key: ccache-$CI_JOB_NAME_SLUG-$CI_COMMIT_REF_SLUG
      fallback_keys:
        - ccache-$CI_JOB_NAME_SLUG-master
      paths:
        - ccache
  tags:
    - macos
    - ${ARCHITECTURE}
  variables:
    CCACHE_DIR: $CI_PROJECT_DIR/ccache
    CCACHE_MAXSIZE: "800Mi"
    # ICM = inkscape ci macos
    # https://gitlab.com/inkscape/infra/inkscape-ci-macos
    ICM_REPO_REF: e33bb8e753acd06a2c1c4c5215f99b83e403aada
    ICM_REPO_URL: https://gitlab.com/inkscape/infra/inkscape-ci-macos.git
    # build number
    INK_BUILD: $CI_PIPELINE_IID
    # package registry to upload dependencies
    PACKAGE_REGISTRY_URL: $CI_API_V4_URL/projects/$CI_PROJECT_ID/packages/generic
    PACKAGE_URL_PREFIX: ${PACKAGE_REGISTRY_URL}/icm/${ICM_REPO_REF}
    # directory and SDK settings for ICM
    REP_DIR: $CI_PROJECT_DIR
    SDKROOT: /opt/sdks/MacOSX11.3.sdk
    WRK_DIR: /Users/Shared/work
  script:
    # Clone the repo containing all the build scripts.
    - |
      git clone $ICM_REPO_URL icm
      git -C icm checkout $ICM_REPO_REF
      git -C icm submodule update --init --recursive
    # Build the dependencies and then Inkscape. Dependencies are uploaded to the
    # package registry so they don't have to be rebuilt every time if there
    # haven't been any changes.
    - |
      VER_DIR=$(icm/jhb/usr/bin/config get VER_DIR)
      PACKAGE_URL=${PACKAGE_URL_PREFIX}/$(basename $VER_DIR)_${ARCHITECTURE}.dmg
      if ! curl -H "JOB-TOKEN: $CI_JOB_TOKEN" -fLO $PACKAGE_URL; then
        icm/110-bootstrap_jhb.sh
        icm/120-build_gtk4.sh
        icm/130-build_inkdeps.sh
        icm/140-build_packaging.sh
        rm $VER_DIR/var/cache/pkg/.skip
        icm/jhb/usr/bin/jhb run rustup self uninstall -y || true
        icm/jhb/usr/bin/archive remove_nonessentials
        icm/jhb/usr/bin/archive create_dmg
        curl --fail-with-body -H "JOB-TOKEN: $CI_JOB_TOKEN" --upload-file $(basename $PACKAGE_URL) $PACKAGE_URL
        rm -rf ${VER_DIR:?}
      fi
    - icm/jhb/usr/bin/archive install_dmg
    - |
      icm/210-inkscape_build.sh
      icm/220-inkscape_package.sh
      icm/230-inkscape_distrib.sh
    - icm/jhb/usr/bin/archive uninstall_dmg
    # Replace the command above with this one to keep the shadow file.
    # This will be used in the test job.
    #- icm/jhb/usr/bin/archive uninstall_dmg archive
  artifacts:
    expire_in: 1 year
    paths:
      - Inkscape*.dmg
      # This artifact has been disabled for now (see above) until the test job
      # is reinstated.
      #- "*.shadow.bz2"


.windows:
  stage: build
  tags:
    - saas-windows-medium-amd64
  cache:
    - key: ccache-windows
      paths:
        - ccache
      when: always
    - key: build-windows-$CI_PIPELINE_IID
      paths:
        - build
      when: always
  variables:
    CHERE_INVOKING: "yes"
    MSYSTEM: UCRT64
    CCACHE_DIR: $CI_PROJECT_DIR/ccache
    CCACHE_MAXSIZE: "250M"
    # ICW = inkscape-ci-windows, https://gitlab.com/inkscape/infra/inkscape-ci-windows
    ICW_VERSION: 126
    ICW_NAME: ink$ICW_VERSION
    ICW_RELEASE_URL: $CI_API_V4_URL/projects/46863172/packages/generic/windows/r$ICW_VERSION/${ICW_NAME}_$MSYSTEM.7z
  before_script:
    - wget.exe --quiet --no-check-certificate $ICW_RELEASE_URL
    - 7z x -oC:/ "${Env:ICW_NAME}_${Env:MSYSTEM}.7z"


inkscape:windows:
  extends: .windows
  timeout: 2h  # this is imposed by the runner
  retry: 2
  parallel:
    matrix:
      - DIST: [ "7z", "exe", "msi" ]
  rules:
    - *do_not_run_for_schedules
    - if: $DIST != "7z"
      when: manual
      allow_failure: true
    - *run_otherwise
  script:
    # install Windows SDK for exe and msi jobs to provide
    # 'C:\Program Files (x86)\Windows Kits\10\bin\10.0.22621.0\x64\signtool.exe'
    - if (${Env:DIST} -ne "7z" ) { choco install windows-sdk-10.1 -y }
    # If we are building the MSI package, install extra build dependencies
    - if (${Env:DIST} -eq "msi") { . "${Env:CI_PROJECT_DIR}\buildtools\windows-deps-install-wix4.ps1" }
    # configure with CMake (if build directory does not exist)
    - . "C:/${Env:ICW_NAME}/usr/bin/bash.exe" -lc 'if [ ! -d build ]; then cmake -B build -G Ninja -DCMAKE_C_COMPILER_LAUNCHER=ccache -DCMAKE_CXX_COMPILER_LAUNCHER=ccache -DCMAKE_INSTALL_PREFIX=$CI_PROJECT_DIR/inkscape; fi'
    # Kill the job before hitting runner's timeout. This way we can preserve the cache so the next retry
    # will be able to advance the build further and eventually finish (after up to two retries, 3 jobs in total).
    # Calculation is:  85 minutes build (5100 seconds, see 'sleep' below)
    #                  35 minutes for pre- and post-flight, buffer
    #                 --- -----------------------------------------------
    #                 120 minutes runner timeout
    - Start-Job -ScriptBlock{sleep 5100; taskkill /t /F /IM "ninja.exe"}
    # build and install with Ninja
    - . "C:/${Env:ICW_NAME}/usr/bin/bash.exe" -lc "ninja -C build install"
    # run dependency checker
    - . "C:/${Env:ICW_NAME}/usr/bin/bash.exe" -lc 'python3 $CI_PROJECT_DIR/buildtools/msys2checkdeps.py check $CI_PROJECT_DIR/inkscape -w $CI_PROJECT_DIR/inkscape/bin'
    # create distributable
    - . "C:/${Env:ICW_NAME}/usr/bin/bash.exe" -lc "ninja -C build dist-win-${DIST}"
  artifacts:
    paths:
      - build/inkscape*.${DIST}

#tests, always run after building
test:linux:
  stage: test
  rules:
    - *do_not_run_for_schedules
    - *run_otherwise
  dependencies:
    - inkscape:linux
  needs: ["inkscape:linux"]
  script:
    - sed -i '/<policy domain="coder" rights="none"/d' /etc/ImageMagick-6/policy.xml
    - cd build
    - ctest -V
  artifacts:
    paths:
      - build/testfiles
      - build/Testing
    when: on_failure

.test:macos:
  extends: inkscape:macos
  stage: test
  parallel:
    matrix:
      - ARCHITECTURE: [ "arm64" ]
  needs:
    - job: inkscape:macos
      parallel:
        matrix:
          - ARCHITECTURE: arm64
  script:
    - icm/jhb/usr/bin/archive install_dmg
    - |
      if ! icm/310-inkscape_test.sh; then
        tar -C $(icm/jhb/usr/bin/config get INK_BLD_DIR) -cpJf testfiles.tar.xz testfiles Testing
        icm/jhb/usr/bin/archive uninstall_dmg
        exit 1
      else
        icm/jhb/usr/bin/archive uninstall_dmg
      fi
  artifacts:
    paths:
      - testfiles.tar.xz
    when: on_failure

###########################
#                         #
#    MR code checkers     #
#                         #
###########################



### This script checks for *merge requests* that they conform to the code style. It allows failures.
  # cf ./_clang-format and https://inkscape.org/develop/coding-style/

codequality:
  stage: test
  needs: []
  rules:
    - *do_not_run_for_schedules
    - *run_for_MR
  script:
    - git fetch $CI_MERGE_REQUEST_PROJECT_URL.git $CI_MERGE_REQUEST_TARGET_BRANCH_NAME
    - echo "Your commit does not comply exactly with the clang-format style checker.\nPlease review the following diff or apply it with\n \$ git apply <<EOF"
    - bash buildtools/codequality.sh $CI_MERGE_REQUEST_DIFF_BASE_SHA | tee clang_format.diff
    - echo "EOF"
    - if [[ -s clang_format.diff ]]; then false; fi
  allow_failure: true
  artifacts:
    paths:
      - clang_format.diff


### We embed script from third party libraries, that we sometimes update from their source. Hence we should NEVER modify them here before submitting the patch upstream!
# Submodules do not need this treatment, so are exempted from the check.
# Ideally, we should remove all this code and use them as packaged libraries. Unfortunately this check only works for merge requests.
codeprotect:
  stage: test
  needs: []
  rules:
    - *do_not_run_for_schedules
    - *run_for_MR
  script:
    - git fetch $CI_MERGE_REQUEST_PROJECT_URL.git $CI_MERGE_REQUEST_TARGET_BRANCH_NAME
    - git diff --name-only $CI_MERGE_REQUEST_DIFF_BASE_SHA src/3rdparty/*/ > changed
    - git submodule foreach --quiet 'echo $name' > submodules
    - comm -23 changed submodules | tee forbidden
    - if [[ -s forbidden ]]; then echo "This commit modifies files that are in an dependency library. Make sure you update upstream first, *then* force the merge in Inkscape."; false; fi

#### All files should have a licence

check-license-headers:
  stage: test
  needs: []
  rules:
    - *do_not_run_for_schedules
    - *run_for_MR
  script:
    - python3 buildtools/check_license_headers.py


### Several translation tests:
#   - verify that the list of translatable files (POTFILES.*.in) are up to date
#   - check if we can successfully re-generate inkscape.pot
#   - sync all .po files with the updated inkscape.pot and run some automated checks on them
#  (artifacts from this job are also used to generate translations statistics for the website)

translations:
  stage: test
  needs: []
  rules:
    - *run_otherwise
  script:
    # make sure dependencies for inkscape.pot are up-to-date
  - mkdir build && cd build && cmake .. && make inkscape_pot && cd .. || exit 1
  - cd po/

  # update POTFILES.*.in
  - ./generate_POTFILES.sh

  # update inkscape.pot and sync all .po files
  - rm -f inkscape.pot
  - cd ../build && make inkscape_pot && cd ../po || exit 1
  - ../buildtools/post_translation_statistics.sh
  - ./update_po_files.sh

  # check if POTFILES.*.in should be updated in the repo (shall we automate this?)
  - 'if [ -n "$(git diff POTFILES.*.in)" ]; then
      git diff POTFILES.*.in;
      echo "New translatable strings in source files found.";
      echo "Please add the paths to POTFILES.*.in so they can be translated";
      echo "(or add them to POTFILES.skip to exclude them from translations).";
      exit 1;
    fi'
  artifacts:
    name: "translations"
    paths:
      - po/

### clang-tidy is an utility to check that some c++ code good practices and patterns are respected. We use it at 1% of its possibilities (only when it suggests fixes).

# ... here only on modified files
clangtidy:linux:
  stage: test
  needs: []
  rules:
    - *do_not_run_for_schedules
    - *run_for_MR
  script:
    - git fetch $CI_MERGE_REQUEST_PROJECT_URL.git $CI_MERGE_REQUEST_TARGET_BRANCH_NAME
    - bash buildtools/clangtidy.sh $CI_MERGE_REQUEST_DIFF_BASE_SHA

# ... here on master commits
clangtidyfull:linux:
  stage: test
  needs: []
  rules:
    - *do_not_run_for_MR
    - *do_not_run_for_schedules
    - <<: *run_otherwise
      changes:
      - src/*
  cache:
    key: "cache-clang"
    paths:
      - ccache/
  <<: *ccache_init
  script:
    - bash buildtools/clangtidy-helper.sh

# Look for icon problems
media-check:
  stage: test
  needs: []
  rules:
    - *do_not_run_for_schedules
    - *run_otherwise
  script:
    - python3 buildtools/media-check-icons.py
    - python3 buildtools/media-check-keys.py


##################################################
#                                                #
#  Building https://inkscape.gitlab.io/inkscape  #
#                                                #
##################################################


### scan-build is a static analysis tool. This job is *slow*.

scan-build:
  stage: test
  rules:
    - if: $SCHEDULED_JOB_NAME == "clang"
  needs: []
  script:
    - apt-get update -yqq && apt-get install -y clang
    - mkdir -p clang-build
    - cd clang-build
    - scan-build cmake .. -DCMAKE_BUILD_TYPE=Debug
    - VERBOSE=1 scan-build -o ../scan make -j2
  artifacts:
    paths:
      - scan/

### doxygen
source-doc:
  stage: build
  rules:
    - if: $SCHEDULED_JOB_NAME == "source-doc"
  script:
    - cd buildtools
    - doxygen Doxyfile
    - doxygen Doxyfile-extensions
    - cd ..
  artifacts:
    paths:
      - doc/doxygen
      - doc/doxygen-extensions


# uploads the clang scan to user.gitlab.io/inkscape/
pages:
  stage: deploy
  rules:
    - if: $SCHEDULED_JOB_NAME == "clang"
    - if: $SCHEDULED_JOB_NAME == "source-doc"
  cache:
    key: "cache-pages"
    paths:
      - public
  dependencies:
    - source-doc
    - scan-build
  script:
    - mkdir -p public/
    - sed "s/%DATE%/$(date '+%B %d, %Y')/" buildtools/ci-index.html > public/index.html
    - if test -e scan; then rm -fr public/scan-build && cp -rv scan/* public/scan-build; fi
    - if test -e doc/doxygen; then rm -fr public/doxygen && cp -rv doc/doxygen/html/. public/doxygen; fi
    - if test -e doc/doxygen-extensions; then rm -fr public/doxygen-extensions && cp -rv doc/doxygen-extensions/html/. public/doxygen-extensions; fi
  artifacts:
    paths:
      - public
# Dependencies are managed in the Dockerfile in the inkscape-ci-docker
# Git repository. Change them there, wait a bit, and then we'll use
# the new ones here in these builds.
image: registry.gitlab.com/inkscape/inkscape-ci-docker/master


# This file is structured in four parts:
# I) definitions
# II) build jobs
# III) checks that are run on merge requests
# IV) building inkscape.gitlab.io/inkscape (doc and scan)
#


#######################
#                     #
#     Definitions     #
#                     #
#######################

# all jobs are safe to interrupt
default:
  interruptible: true
  artifacts:
    name: "$CI_JOB_NAME-$CI_COMMIT_REF_NAME"
  timeout: 3h


#speedup git on runners
variables:
  GIT_DEPTH: "50"
  GIT_SUBMODULE_STRATEGY: recursive

#reusable templates
.ccache_init: &ccache_init
  before_script:
    - mkdir -p ccache
    - export CCACHE_BASEDIR=${PWD}
    - export CCACHE_DIR=${PWD}/ccache

.cmake: &cmake
- mkdir -p build/conf
- cd build
- cmake .. -DCMAKE_C_COMPILER_LAUNCHER=ccache -DCMAKE_CXX_COMPILER_LAUNCHER=ccache -DCMAKE_BUILD_TYPE=Debug -DCMAKE_INSTALL_PREFIX:PATH=$PWD/install_dir/ -DCMAKE_EXPORT_COMPILE_COMMANDS=ON

# basic workflow setup:
# - run pipelines for all branches without an open MR
# - run MR pipeline only as soon as an MR is opened
workflow:
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
    - if: '$CI_COMMIT_BRANCH && $CI_OPEN_MERGE_REQUESTS'
      when: never
    - if: '$CI_COMMIT_BRANCH'

.run_MR: &run_for_MR
  if: '$CI_MERGE_REQUEST_ID'

.run_no_MR: &do_not_run_for_MR
  if: '$CI_MERGE_REQUEST_ID'
  when: never

.run_no_schedules: &do_not_run_for_schedules
  if: '$CI_PIPELINE_SOURCE == "schedule"'
  when: never

.run_otherwise: &run_otherwise
  when: on_success


#######################
#                     #
#  Building inkscape  #
#                     #
#######################
# Linux, Appimage, macOS, Windows.


inkscape:linux:
  stage: build
  timeout: 3h
  rules:
    - *do_not_run_for_schedules
    - *run_otherwise
  cache:
    key: "cache-linux"
    paths:
      - ccache/
  <<: *ccache_init
  script:
    - *cmake
    - make -j3 install
    - make -j3 tests
    - make -j3 unit_tests
    #- cpack -G DEB
    - rm -rf src _CPack_Packages # exclude from artifacts
    - cd ..
  artifacts:
    expire_in: 1 year
    paths:
      - build/


appimage:linux:
  stage: build
  timeout: 3h
  rules:
    - *do_not_run_for_schedules
    - *run_otherwise
  cache:
    key: "cache-appimage"
    paths:
      - ccache/
  <<: *ccache_init
  script:
    - bash -ex packaging/appimage/generate.sh
  artifacts:
    expire_in: 1 year
    paths:
      - Inkscape*.AppImage*


inkscape:macos:
  stage: build
  parallel:
    matrix:
      - ARCHITECTURE: [ "arm64" ]
  rules:
    - *do_not_run_for_schedules
    # Create macOS jobs only for the "inkscape" namespace as the runner is
    # restricted to that group. ("dehesselle" namespace has its own runner)
    - if: $CI_PROJECT_NAMESPACE != "inkscape" && $CI_PROJECT_NAMESPACE != "dehesselle"
      when: never
    - *run_otherwise
  cache:
    - key: ccache-$CI_JOB_NAME_SLUG-$CI_COMMIT_REF_SLUG
      fallback_keys:
        - ccache-$CI_JOB_NAME_SLUG-master
      paths:
        - ccache
  tags:
    - macos
    - ${ARCHITECTURE}
  variables:
    CCACHE_DIR: $CI_PROJECT_DIR/ccache
    CCACHE_MAXSIZE: "800Mi"
    # ICM = inkscape ci macos
    # https://gitlab.com/inkscape/infra/inkscape-ci-macos
    ICM_REPO_REF: e33bb8e753acd06a2c1c4c5215f99b83e403aada
    ICM_REPO_URL: https://gitlab.com/inkscape/infra/inkscape-ci-macos.git
    # build number
    INK_BUILD: $CI_PIPELINE_IID
    # package registry to upload dependencies
    PACKAGE_REGISTRY_URL: $CI_API_V4_URL/projects/$CI_PROJECT_ID/packages/generic
    PACKAGE_URL_PREFIX: ${PACKAGE_REGISTRY_URL}/icm/${ICM_REPO_REF}
    # directory and SDK settings for ICM
    REP_DIR: $CI_PROJECT_DIR
    SDKROOT: /opt/sdks/MacOSX11.3.sdk
    WRK_DIR: /Users/Shared/work
  script:
    # Clone the repo containing all the build scripts.
    - |
      git clone $ICM_REPO_URL icm
      git -C icm checkout $ICM_REPO_REF
      git -C icm submodule update --init --recursive
    # Build the dependencies and then Inkscape. Dependencies are uploaded to the
    # package registry so they don't have to be rebuilt every time if there
    # haven't been any changes.
    - |
      VER_DIR=$(icm/jhb/usr/bin/config get VER_DIR)
      PACKAGE_URL=${PACKAGE_URL_PREFIX}/$(basename $VER_DIR)_${ARCHITECTURE}.dmg
      if ! curl -H "JOB-TOKEN: $CI_JOB_TOKEN" -fLO $PACKAGE_URL; then
        icm/110-bootstrap_jhb.sh
        icm/120-build_gtk4.sh
        icm/130-build_inkdeps.sh
        icm/140-build_packaging.sh
        rm $VER_DIR/var/cache/pkg/.skip
        icm/jhb/usr/bin/jhb run rustup self uninstall -y || true
        icm/jhb/usr/bin/archive remove_nonessentials
        icm/jhb/usr/bin/archive create_dmg
        curl --fail-with-body -H "JOB-TOKEN: $CI_JOB_TOKEN" --upload-file $(basename $PACKAGE_URL) $PACKAGE_URL
        rm -rf ${VER_DIR:?}
      fi
    - icm/jhb/usr/bin/archive install_dmg
    - |
      icm/210-inkscape_build.sh
      icm/220-inkscape_package.sh
      icm/230-inkscape_distrib.sh
    - icm/jhb/usr/bin/archive uninstall_dmg
    # Replace the command above with this one to keep the shadow file.
    # This will be used in the test job.
    #- icm/jhb/usr/bin/archive uninstall_dmg archive
  artifacts:
    expire_in: 1 year
    paths:
      - Inkscape*.dmg
      # This artifact has been disabled for now (see above) until the test job
      # is reinstated.
      #- "*.shadow.bz2"


.windows:
  stage: build
  tags:
    - saas-windows-medium-amd64
  cache:
    - key: ccache-windows
      paths:
        - ccache
      when: always
    - key: build-windows-$CI_PIPELINE_IID
      paths:
        - build
      when: always
  variables:
    CHERE_INVOKING: "yes"
    MSYSTEM: UCRT64
    CCACHE_DIR: $CI_PROJECT_DIR/ccache
    CCACHE_MAXSIZE: "250M"
    # ICW = inkscape-ci-windows, https://gitlab.com/inkscape/infra/inkscape-ci-windows
    ICW_VERSION: 126
    ICW_NAME: ink$ICW_VERSION
    ICW_RELEASE_URL: $CI_API_V4_URL/projects/46863172/packages/generic/windows/r$ICW_VERSION/${ICW_NAME}_$MSYSTEM.7z
  before_script:
    - wget.exe --quiet --no-check-certificate $ICW_RELEASE_URL
    - 7z x -oC:/ "${Env:ICW_NAME}_${Env:MSYSTEM}.7z"


inkscape:windows:
  extends: .windows
  timeout: 2h  # this is imposed by the runner
  retry: 2
  parallel:
    matrix:
      - DIST: [ "7z", "exe", "msi" ]
  rules:
    - *do_not_run_for_schedules
    - if: $DIST != "7z"
      when: manual
      allow_failure: true
    - *run_otherwise
  script:
    # install Windows SDK for exe and msi jobs to provide
    # 'C:\Program Files (x86)\Windows Kits\10\bin\10.0.22621.0\x64\signtool.exe'
    - if (${Env:DIST} -ne "7z" ) { choco install windows-sdk-10.1 -y }
    # If we are building the MSI package, install extra build dependencies
    - if (${Env:DIST} -eq "msi") { . "${Env:CI_PROJECT_DIR}\buildtools\windows-deps-install-wix4.ps1" }
    # configure with CMake (if build directory does not exist)
    - . "C:/${Env:ICW_NAME}/usr/bin/bash.exe" -lc 'if [ ! -d build ]; then cmake -B build -G Ninja -DCMAKE_C_COMPILER_LAUNCHER=ccache -DCMAKE_CXX_COMPILER_LAUNCHER=ccache -DCMAKE_INSTALL_PREFIX=$CI_PROJECT_DIR/inkscape; fi'
    # Kill the job before hitting runner's timeout. This way we can preserve the cache so the next retry
    # will be able to advance the build further and eventually finish (after up to two retries, 3 jobs in total).
    # Calculation is:  85 minutes build (5100 seconds, see 'sleep' below)
    #                  35 minutes for pre- and post-flight, buffer
    #                 --- -----------------------------------------------
    #                 120 minutes runner timeout
    - Start-Job -ScriptBlock{sleep 5100; taskkill /t /F /IM "ninja.exe"}
    # build and install with Ninja
    - . "C:/${Env:ICW_NAME}/usr/bin/bash.exe" -lc "ninja -C build install"
    # run dependency checker
    - . "C:/${Env:ICW_NAME}/usr/bin/bash.exe" -lc 'python3 $CI_PROJECT_DIR/buildtools/msys2checkdeps.py check $CI_PROJECT_DIR/inkscape -w $CI_PROJECT_DIR/inkscape/bin'
    # create distributable
    - . "C:/${Env:ICW_NAME}/usr/bin/bash.exe" -lc "ninja -C build dist-win-${DIST}"
  artifacts:
    paths:
      - build/inkscape*.${DIST}

#tests, always run after building
test:linux:
  stage: test
  rules:
    - *do_not_run_for_schedules
    - *run_otherwise
  dependencies:
    - inkscape:linux
  needs: ["inkscape:linux"]
  script:
    - sed -i '/<policy domain="coder" rights="none"/d' /etc/ImageMagick-6/policy.xml
    - cd build
    - ctest -V
  artifacts:
    paths:
      - build/testfiles
      - build/Testing
    when: on_failure

.test:macos:
  extends: inkscape:macos
  stage: test
  parallel:
    matrix:
      - ARCHITECTURE: [ "arm64" ]
  needs:
    - job: inkscape:macos
      parallel:
        matrix:
          - ARCHITECTURE: arm64
  script:
    - icm/jhb/usr/bin/archive install_dmg
    - |
      if ! icm/310-inkscape_test.sh; then
        tar -C $(icm/jhb/usr/bin/config get INK_BLD_DIR) -cpJf testfiles.tar.xz testfiles Testing
        icm/jhb/usr/bin/archive uninstall_dmg
        exit 1
      else
        icm/jhb/usr/bin/archive uninstall_dmg
      fi
  artifacts:
    paths:
      - testfiles.tar.xz
    when: on_failure

###########################
#                         #
#    MR code checkers     #
#                         #
###########################



### This script checks for *merge requests* that they conform to the code style. It allows failures.
  # cf ./_clang-format and https://inkscape.org/develop/coding-style/

codequality:
  stage: test
  needs: []
  rules:
    - *do_not_run_for_schedules
    - *run_for_MR
  script:
    - git fetch $CI_MERGE_REQUEST_PROJECT_URL.git $CI_MERGE_REQUEST_TARGET_BRANCH_NAME
    - echo "Your commit does not comply exactly with the clang-format style checker.\nPlease review the following diff or apply it with\n \$ git apply <<EOF"
    - bash buildtools/codequality.sh $CI_MERGE_REQUEST_DIFF_BASE_SHA | tee clang_format.diff
    - echo "EOF"
    - if [[ -s clang_format.diff ]]; then false; fi
  allow_failure: true
  artifacts:
    paths:
      - clang_format.diff


### We embed script from third party libraries, that we sometimes update from their source. Hence we should NEVER modify them here before submitting the patch upstream!
# Submodules do not need this treatment, so are exempted from the check.
# Ideally, we should remove all this code and use them as packaged libraries. Unfortunately this check only works for merge requests.
codeprotect:
  stage: test
  needs: []
  rules:
    - *do_not_run_for_schedules
    - *run_for_MR
  script:
    - git fetch $CI_MERGE_REQUEST_PROJECT_URL.git $CI_MERGE_REQUEST_TARGET_BRANCH_NAME
    - git diff --name-only $CI_MERGE_REQUEST_DIFF_BASE_SHA src/3rdparty/*/ > changed
    - git submodule foreach --quiet 'echo $name' > submodules
    - comm -23 changed submodules | tee forbidden
    - if [[ -s forbidden ]]; then echo "This commit modifies files that are in an dependency library. Make sure you update upstream first, *then* force the merge in Inkscape."; false; fi

#### All files should have a licence

check-license-headers:
  stage: test
  needs: []
  rules:
    - *do_not_run_for_schedules
    - *run_for_MR
  script:
    - python3 buildtools/check_license_headers.py


### Several translation tests:
#   - verify that the list of translatable files (POTFILES.*.in) are up to date
#   - check if we can successfully re-generate inkscape.pot
#   - sync all .po files with the updated inkscape.pot and run some automated checks on them
#  (artifacts from this job are also used to generate translations statistics for the website)

translations:
  stage: test
  needs: []
  rules:
    - *run_otherwise
  script:
    # make sure dependencies for inkscape.pot are up-to-date
  - mkdir build && cd build && cmake .. && make inkscape_pot && cd .. || exit 1
  - cd po/

  # update POTFILES.*.in
  - ./generate_POTFILES.sh

  # update inkscape.pot and sync all .po files
  - rm -f inkscape.pot
  - cd ../build && make inkscape_pot && cd ../po || exit 1
  - ../buildtools/post_translation_statistics.sh
  - ./update_po_files.sh

  # check if POTFILES.*.in should be updated in the repo (shall we automate this?)
  - 'if [ -n "$(git diff POTFILES.*.in)" ]; then
      git diff POTFILES.*.in;
      echo "New translatable strings in source files found.";
      echo "Please add the paths to POTFILES.*.in so they can be translated";
      echo "(or add them to POTFILES.skip to exclude them from translations).";
      exit 1;
    fi'
  artifacts:
    name: "translations"
    paths:
      - po/

### clang-tidy is an utility to check that some c++ code good practices and patterns are respected. We use it at 1% of its possibilities (only when it suggests fixes).

# ... here only on modified files
clangtidy:linux:
  stage: test
  needs: []
  rules:
    - *do_not_run_for_schedules
    - *run_for_MR
  script:
    - git fetch $CI_MERGE_REQUEST_PROJECT_URL.git $CI_MERGE_REQUEST_TARGET_BRANCH_NAME
    - bash buildtools/clangtidy.sh $CI_MERGE_REQUEST_DIFF_BASE_SHA

# ... here on master commits
clangtidyfull:linux:
  stage: test
  needs: []
  rules:
    - *do_not_run_for_MR
    - *do_not_run_for_schedules
    - <<: *run_otherwise
      changes:
      - src/*
  cache:
    key: "cache-clang"
    paths:
      - ccache/
  <<: *ccache_init
  script:
    - bash buildtools/clangtidy-helper.sh

# Look for icon problems
media-check:
  stage: test
  needs: []
  rules:
    - *do_not_run_for_schedules
    - *run_otherwise
  script:
    - python3 buildtools/media-check-icons.py
    - python3 buildtools/media-check-keys.py


##################################################
#                                                #
#  Building https://inkscape.gitlab.io/inkscape  #
#                                                #
##################################################


### scan-build is a static analysis tool. This job is *slow*.

scan-build:
  stage: test
  rules:
    - if: $SCHEDULED_JOB_NAME == "clang"
  needs: []
  script:
    - apt-get update -yqq && apt-get install -y clang
    - mkdir -p clang-build
    - cd clang-build
    - scan-build cmake .. -DCMAKE_BUILD_TYPE=Debug
    - VERBOSE=1 scan-build -o ../scan make -j2
  artifacts:
    paths:
      - scan/

### doxygen
source-doc:
  stage: build
  rules:
    - if: $SCHEDULED_JOB_NAME == "source-doc"
  script:
    - cd buildtools
    - doxygen Doxyfile
    - doxygen Doxyfile-extensions
    - cd ..
  artifacts:
    paths:
      - doc/doxygen
      - doc/doxygen-extensions


# uploads the clang scan to user.gitlab.io/inkscape/
pages:
  stage: deploy
  rules:
    - if: $SCHEDULED_JOB_NAME == "clang"
    - if: $SCHEDULED_JOB_NAME == "source-doc"
  cache:
    key: "cache-pages"
    paths:
      - public
  dependencies:
    - source-doc
    - scan-build
  script:
    - mkdir -p public/
    - sed "s/%DATE%/$(date '+%B %d, %Y')/" buildtools/ci-index.html > public/index.html
    - if test -e scan; then rm -fr public/scan-build && cp -rv scan/* public/scan-build; fi
    - if test -e doc/doxygen; then rm -fr public/doxygen && cp -rv doc/doxygen/html/. public/doxygen; fi
    - if test -e doc/doxygen-extensions; then rm -fr public/doxygen-extensions && cp -rv doc/doxygen-extensions/html/. public/doxygen-extensions; fi
  artifacts:
    paths:
      - public
